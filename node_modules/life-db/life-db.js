module.exports = {
	rootFolderName : "LifeDB",
	init : function(databaseName) {
		this.checkAndCreateDatabase(databaseName); 
	},
	checkAndCreateDatabase : function(databaseName, callBack) {
		var presentObject = this;
		var fs = require('fs');
		if(presentObject.isValidDatabaseName(databaseName)) {
			if(!fs.exists(presentObject.rootFolderName)) {
				fs.mkdir(presentObject.rootFolderName, function() {
					fs.mkdir(presentObject.rootFolderName+"/"+databaseName, function() {
						if(typeof callBack!="undefined" && typeof callBack=="function") {
							callBack();
						}
					});
				});
			} else {
				if(!fs.exists(presentObject.rootFolderName+"/"+databaseName)) {
					fs.mkdir(presentObject.rootFolderName+"/"+databaseName, function() {
						if(typeof callBack!="undefined" && typeof callBack=="function") {
							callBack();
						}
					});
				}
			}
		}
	},
	isValidDatabaseName : function(databaseName) {
		if(databaseName.indexOf(" ")==-1) {
			return true;
		} else {
			return false;
		}
	},
	insert : function(databaseName, pageName, data) {
		var presentObject = this;
		if(!presentObject.checkIfDatabaseExists(databaseName)) {// if database doesn't exists
			presentObject.checkAndCreateDatabase(databaseName, presentObject.insert(databaseName, pageName, data));
		} else { // if page doesn't exists
			if(!presentObject.checkIfPageExists(databaseName, pageName)) {
				presentObject.createPage(databaseName, pageName, presentObject.insert(databaseName, pageName, data));
			} else {

			}
		}
	},
	checkIfDatabaseExists : function(databaseName) { // check if database exists
		var fs = require('fs');
		return fs.exists(this.rootFolderName+"/"+databaseName);
	},
	checkIfPageExists : function(databaseName, pageName) { // checks if the page already exists or not
		var databasePath = this.rootFolderName+"/"+databaseName;
		var pagePath = databasePath + "/" + pageName + ".db";
		var fs = require('fs');
		return fs.exists(pagePath);		
	},
	createPage : function(databaseName, pageName, callBack) {
		var fs = require('fs');
		var databasePath = this.rootFolderName+"/"+databaseName;
		var pagePath = databasePath + "/" + pageName + ".db";
		var initialPageContent = this.getWritableContent(this.getInitialPageContent(databaseName, pageName));
		fs.writeFile(initialPageContent, function() {

		});
	},
	getWritableContent : function(data) {// this function takes the charge of encrypting the data
		return JSON.stringify(data);
	},
	getInitialPageContent : function(databaseName, pageName) { // this function returns the content which will be written initially to a empty page
		var initialContent = {};
		initialContent.databaseName = databaseName;
		initialContent.pageName = pageName;
		initialContent.createdOn = new Date().getTime();
		initialContent.data = [];
		return initialContent;
	}
}