module.exports = {
	rootFolderName : "LifeDB",
	init : function(databaseName, callBack) {
		this.checkAndCreateDatabase(databaseName, callBack); 
	},
	checkAndCreateDatabase : function(databaseName, callBack) {
		var presentObject = this;
		var fs = require('fs');
		if(presentObject.isValidDatabaseName(databaseName)) {
			fs.open(presentObject.rootFolderName, "r", function(err, fd) {
				if(err) {// if root folder not created
					fs.mkdir(presentObject.rootFolderName, function() {// root folder created
						fs.mkdir(presentObject.rootFolderName+"/"+databaseName, function() { // data base folder created
							if(typeof callBack!="undefined" && typeof callBack=="function") {
								callBack();
							}
						});
					});
				} else { // this code block will execute if the root folder is created
					fs.open(presentObject.rootFolderName+"/"+databaseName, "r", function(err, fd) {
						if(err) { // if database folder not created
							fs.mkdir(presentObject.rootFolderName+"/"+databaseName, function() { // data base folder created
								if(typeof callBack!="undefined" && typeof callBack=="function") {
									callBack();
								}	
							});
						}
					});
				}
			});
		}
	},
	isValidDatabaseName : function(databaseName) {
		if(databaseName.indexOf(" ")==-1) {
			return true;
		} else {
			return false;
		}
	},
	insert : function(databaseName, pageName, data, callBack) {
		var presentObject = this;
		presentObject.checkIfDatabaseExists(databaseName, function(flag) {
			if(flag) { // database exists
				presentObject.checkIfPageExists(databaseName, pageName, function(flag) {
					if(flag) {// page exists
						presentObject.initiateInsert(databaseName, pageName, data, callBack);
					} else { // page doesn't exists
						presentObject.createPage(databaseName, pageName, function() {
							presentObject.initiateInsert(databaseName, pageName, data, callBack);
						});
					}
				});
			} else { // database doesn't exists
				presentObject.checkAndCreateDatabase(databaseName, function() {
					presentObject.createPage(databaseName, pageName, function() {
						presentObject.initiateInsert(databaseName, pageName, data);
					});
				});
			}
		});
	},
	initiateInsert : function(databaseName, pageName, data, callBack) {
		var presentObject = this;
		var databasePath = presentObject.rootFolderName+"/"+databaseName;
		var pagePath = databasePath + "/" + pageName + ".db";
		presentObject.getPageContent(pagePath, function(dataFromPage) {
			var dataLength = 1;
			if( Object.prototype.toString.call(data) === '[object Array]' ) {
				dataLength = data.length;
				for(var index in data) {
					dataFromPage.data.push(data[index]);
				}
			} else {
				dataFromPage.data.push(data);
			}
			dataFromPage = presentObject.getWritableContent(dataFromPage);
			presentObject.writeDataInPage(pagePath, data, function(err) {
				if(err) {
					console.log("Failed to write data");
					callBack(0);
				} else {
					callBack(dataLength);
				}
			});
		});
		
	},
	writeDataInPage : function(pagePath, data, callBack) {
		var fs = require('fs');
		fs.writeFile(pagePath, data, {encoding:'utf8'}, function() {
			callBack(0);
		});
	}
	getPageContent : function(pagePath, callBack) { // returns page content from page path
		var fs = require('fs');
		var presentObject = this;
		fs.readFile(filePath, "utf-8", function(err, data){
			data = presentObject.getReadableContent(data);
			callBack(data);
		});
	},
	getReadableContent : function(data) { // this function decrypt the data
		var outputData = JSON.parse(data);
		return outputData;
	},
	checkIfDatabaseExists : function(databaseName, callBack) { // check if database exists
		var presentObject = this;
		var fs = require('fs');
		fs.open(this.rootFolderName+"/"+databaseName, "r", function(err, fd) {
			if(err) { // if database doesn't exists
				if(typeof callBack != "undefined" && typeof callBack == "function") {
					callBack(0);
				}
			} else { // if database exists
				if(typeof callBack != "undefined" && typeof callBack == "function") {
					callBack(1);
				}
			}
		});
	},
	checkIfPageExists : function(databaseName, pageName, callBack) { // checks if the page already exists or not
		var presentObject = this;
		var databasePath = this.rootFolderName+"/"+databaseName;
		var pagePath = databasePath + "/" + pageName + ".db";
		var fs = require('fs');
		fs.open(pagePath, "r", function(err, fd) {
			if(err) { // if page doesn't exists
				if(typeof callBack != "undefined" && typeof callBack == "function") {
					callBack(0);
				}
			} else { // if page exists
				if(typeof callBack != "undefined" && typeof callBack == "function") {
					callBack(1);
				}
			}
		});		
	},
	createPage : function(databaseName, pageName, callBack) {
		var fs = require('fs');
		var databasePath = this.rootFolderName+"/"+databaseName;
		var pagePath = databasePath + "/" + pageName + ".db";
		var initialPageContent = this.getWritableContent(this.getInitialPageContent(databaseName, pageName));
		fs.writeFile(pagePath,initialPageContent, function() {
			if(typeof callBack != "undefined" && typeof callBack == "function") {
				callBack();
			}
		});
	},
	getWritableContent : function(data) {// this function takes the charge of encrypting the data
		var outputData = JSON.stringify(data);
		return outputData;
	},
	getInitialPageContent : function(databaseName, pageName) { // this function returns the content which will be written initially to a empty page
		var initialContent = {};
		initialContent.databaseName = databaseName;
		initialContent.pageName = pageName;
		initialContent.createdOn = new Date().getTime();
		initialContent.lastModifiedOn = initialContent.createdOn;
		initialContent.data = [];
		return initialContent;
	}
}
