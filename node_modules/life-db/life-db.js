module.exports = {
	 
	rootFolderName : "LifeDB",
	
	pageFileExtension : ".db",
	
	operator : {
		OR : "||",
		AND : "&&",
		EQUAL : "@eq",
		NOTEQUAL : "@nq",
		GREATERTHAN : "@gt",
		GREATERTHANEQUAL : "@ge",
		LESSTHAN : "@lt",
		LESSTHANEQUAL : "@le"
	},

	init : function(databaseName, callBack) {
		this.checkAndCreateDatabase(databaseName, callBack); 
	},
	
	checkAndCreateDatabase : function(databaseName, callBack) {
		var presentObject = this;
		var fs = require('fs');
		if(presentObject.isValidDatabaseName(databaseName)) {
			fs.open(presentObject.rootFolderName, "r", function(err, fd) {
				if(err) {// if root folder not created
					fs.mkdir(presentObject.rootFolderName, function() {// root folder created
						fs.mkdir(presentObject.rootFolderName+"/"+databaseName, function() { // data base folder created
							if(typeof callBack!="undefined" && typeof callBack=="function") {
								callBack();
							}
						});
					});
				} else { // this code block will execute if the root folder is created
					fs.open(presentObject.rootFolderName+"/"+databaseName, "r", function(err, fd) {
						if(err) { // if database folder not created
							fs.mkdir(presentObject.rootFolderName+"/"+databaseName, function() { // data base folder created
								if(typeof callBack!="undefined" && typeof callBack=="function") {
									callBack();
								}	
							});
						} else {
							if(typeof callBack!="undefined" && typeof callBack=="function") {
								callBack();
							}
						}
					});
				}
			});
		}
	},
	
	isValidDatabaseName : function(databaseName) { // checks if given database name is valid or not
		if(databaseName.indexOf(" ") == -1) {
			return true;
		} else {
			return false;
		}
	},
	
	/**
	*  databaseName : Name of the data base
	*  pageName : name of the page where the data is going to be inserted
	*  query : a string which defines the query for the selected data
	*  callBack : the method which will be called after the insertion process is complete   
	*/

	find : function(databaseName, pageName, query, callBack) {
		var presentObject = this;
		var queryArray = presentObject.splitQueryToMakeArrayOfQueries(query);
	},

	splitQueryToMakeArrayOfQueries : function(query) {
		var queryArray = this.splitQueryByOR(query);
	},

	splitQueryByOR : function(query) {
		return query.split(this.operator.OR);
	},

	/**
	*  databaseName : Name of the data base
	*  pageName : name of the page where the data is going to be inserted
	*  data : the data to be inserted
	*  callBack : the method which will be called after the insertion process is complete   
	*/

	insert : function(databaseName, pageName, data, callBack) { // insert data to page of database
		var presentObject = this;
		presentObject.checkIfDatabaseExists(databaseName, function(flag) {
			if(flag) { // database exists
				presentObject.checkIfPageExists(databaseName, pageName, function(flag) {
					if(flag) {// page exists
						presentObject.initiateInsert(databaseName, pageName, data, callBack);
					} else { // page doesn't exists
						presentObject.createPage(databaseName, pageName, function() {
							presentObject.initiateInsert(databaseName, pageName, data, callBack);
						});
					}
				});
			} else { // database doesn't exists
				presentObject.checkAndCreateDatabase(databaseName, function() {
					presentObject.createPage(databaseName, pageName, function() {
						presentObject.initiateInsert(databaseName, pageName, data, callBack);
					});
				});
			}
		});
	},


	initiateInsert : function(databaseName, pageName, data, callBack) {
		var presentObject = this;
		var databasePath = presentObject.rootFolderName+"/"+databaseName;
		var pagePath = databasePath + "/" + pageName + presentObject.pageFileExtension;
		presentObject.getPageContent(pagePath, function(dataFromPage) {
			var dataLength = 1;
			dataFromPage = presentObject.getReadableContent(dataFromPage);
			data = presentObject.modifyDataforLifeDB(data, dataFromPage.data.length);
			var newData = presentObject.mergeData(dataFromPage, data);
			presentObject.writeDataInPage(pagePath, newData, function(err) {
				if(err) {
					console.log("Failed to write data");
					if(typeof callBack != "undefined" && typeof callBack == "function") {
						callBack(0);
					}
				} else {
					if(typeof callBack != "undefined" && typeof callBack == "function") {
						(Array.isArray(data)) ? (dataLength=data.length) : (dataLength=1);
						callBack(dataLength);
					}
				}
			});
		});
		
	},

	modifyDataforLifeDB : function(data, counter) { // this function add lifedb properties to the data provided to insert
		if(Array.isArray(data)) {
			for(var index in data) {
				data[index].lifedb_id = counter;
				data[index].lifedb_createdOn = new Date().getTime();
				data[index].lifedb_lastModifiedOn = data[index].lifedb_createdOn;
			}
		} else {
			data.lifedb_id = counter;
			data.lifedb_createdOn = new Date().getTime();
			data.lifedb_lastModifiedOn = data.lifedb_createdOn;
		}
		return data;
	},

	mergeData : function(dataFromPage, data) { // merge the content to the content of the page
		if(Array.isArray(data)) {
			for(var index in data) {
				dataFromPage.data.push(data[index]);
			}
		} else {
			dataFromPage.data.push(data);
		}
		return dataFromPage;
	},

	writeDataInPage : function(pagePath, data, callBack) {
		var fs = require('fs');
		var writableData = this.getWritableContent(data);
		fs.writeFile(pagePath, writableData, {encoding:'utf8'}, function() {
			callBack(0);
		});
	},
	
	getPageContent : function(pagePath, callBack) { // returns page content from page path
		var fs = require('fs');
		var presentObject = this;
		fs.readFile(pagePath, "utf-8", function(err, data){
			callBack(data);
		});
	},
	
	getReadableContent : function(data) { // this function decrypt the data
		var presentObject = this;
		data = presentObject.decrypt(data);
		var outputData;
		try {
			outputData = JSON.parse(data);
		} catch(e) {
			return "";
		}
		return outputData;
	},
	
	encrypt : function(data) {
		var newData = "";
		for(var index=0; index<data.length; index++) {
			var ascii = data.charCodeAt(index);
			if((ascii>=65 && ascii<=90) || (ascii>=97 && ascii<=122)) {
				if(index%2==0) {
					ascii = ascii - 1;
					if(ascii == 64) {
						ascii = 90;
					}
					if(ascii == 96) {
						ascii = 122;
					}
				} else {
					ascii = ascii + 1;
					if(ascii == 91) {
						ascii = 65;
					}
					if(ascii == 123) {
						ascii = 97;
					}
				}
				newData += String.fromCharCode(ascii);
			} else {
				newData += data[index];
			}
		}
		return  newData;
	},
	
	decrypt : function(data) {
		var newData = "";
		for(var index=0; index<data.length; index++) {
			var ascii = data.charCodeAt(index);
			if((ascii>=65 && ascii<=90) || (ascii>=97 && ascii<=122)) {
				if(index%2==0) {
					ascii = ascii + 1;
					if(ascii == 91) {
						ascii = 65;
					}
					if(ascii == 123) {
						ascii = 97;
					}
				} else {
					ascii = ascii - 1;
					if(ascii == 64) {
						ascii = 90;
					}
					if(ascii == 96) {
						ascii = 122;
					}
				}
				newData += String.fromCharCode(ascii);
			} else {
				newData += data[index];
			}
		}
		return  newData;	
	},
	
	checkIfDatabaseExists : function(databaseName, callBack) { // check if database exists
		var presentObject = this;
		var fs = require('fs');
		fs.open(this.rootFolderName+"/"+databaseName, "r", function(err, fd) {
			if(err) { // if database doesn't exists
				if(typeof callBack != "undefined" && typeof callBack == "function") {
					callBack(0);
				}
			} else { // if database exists
				if(typeof callBack != "undefined" && typeof callBack == "function") {
					callBack(1);
				}
			}
		});
	},
	
	checkIfPageExists : function(databaseName, pageName, callBack) { // checks if the page already exists or not
		var presentObject = this;
		var databasePath = this.rootFolderName+"/"+databaseName;
		var pagePath = databasePath + "/" + pageName + presentObject.pageFileExtension;
		var fs = require('fs');
		fs.open(pagePath, "r", function(err, fd) {
			if(err) { // if page doesn't exists
				if(typeof callBack != "undefined" && typeof callBack == "function") {
					callBack(0);
				}
			} else { // if page exists
				if(fd == "") {
					presentObject.createPage(databaseName, pageName, callBack);
				} else {
					if(typeof callBack != "undefined" && typeof callBack == "function") {
						callBack(1);
					}
				}
			}
		});		
	},
	
	createPage : function(databaseName, pageName, callBack) { // create the page as given name
		var fs = require('fs');
		var databasePath = this.rootFolderName+"/"+databaseName;
		var pagePath = databasePath + "/" + pageName + this.pageFileExtension;
		var initialPageContent = this.getWritableContent(this.getInitialPageContent(databaseName, pageName));
		fs.writeFile(pagePath,initialPageContent, function() {
			if(typeof callBack != "undefined" && typeof callBack == "function") {
				callBack();
			}
		});
	},
	
	getWritableContent : function(data) {// this function takes the charge of encrypting the data
		var presentObject = this;
		var outputData = presentObject.encrypt(JSON.stringify(data));
		return outputData;
	},
	
	getInitialPageContent : function(databaseName, pageName) { // this function returns the content which will be written initially to a empty page
		var initialContent = {};
		initialContent.databaseName = databaseName;
		initialContent.pageName = pageName;
		initialContent.createdOn = new Date().getTime();
		initialContent.lastModifiedOn = initialContent.createdOn;
		initialContent.data = [];
		return initialContent;
	}
};
